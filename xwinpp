#!/usr/bin/env bash

# xwinpp
# Copyright 2014 D630, GNU GPLv3
# https://github.com/D630/xwinpp

# -- DEBUGGING.

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/xwinpp.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

# -- SETTINGS.

#declare vars_base=$(set -o posix ; set)
builtin shopt -s extglob

# -- FUNCTIONS.

__xwinpp_version() { builtin echo "0.1.2.5" ; }

__xwinpp_usage() { builtin echo "xwinpp -I (-B|-b) [-D|-P|-t|-V] (-h|-p|-S|-v)" ; }

__xwinpp_help()
{
     builtin printf "
$(__xwinpp_usage)

OPTIONS
-------
    OPTION                  ARG
    ------                  ---
    -B,  --hidden
    -b,  --visible
    -D,  --desk=            <DESK>...
    -h,  --help
    -I,  --input-file=      <FILE> or hyphen (-)
    -P,  --win-active-pos=  <POS>
    -t,  --tags=            <TTAG>...
    -v,  --version
    -V,  --win-active=      <XID>

ACTIONS
-------
    ACTION                  ARG
    ------                  ---
    -p,  --print
    -S,  --set              <STAG>

ARGUMENTS
---------
    <DESK>                  'any', 'curr' or relative to the current
                            desktop 'next' or 'prev'. Specify a desktop
                            number (starts at 0) with the prefix 'i:'; a
                            desktop name is prefixed with 's:'.
                            Examples: 'i:0'; 's:web'; ''s:some stuff''.
                            To select more than one desk, seperate with
                            a comma like 'i:0,i:1,s:web'.
    <FILE>                  File may be a regular file or a named pipe.
    <POS>                   Position of the active window in the output
                            specified by an integer. You may also write
                            'start' or 'end'. Position starts with '0'.
    <STAG>                  You have to set all tags in <_XWINPP_TAGS>
                            property at the same time. To set a string
                            with more than one tag, seperate it with a
                            comma and prefix it with 'tag:'. Example:
                            'tag:gui,viewer,pdf'. To remove use only
                            'tag:'.
    <TTAG>                  Tag, which was specified as <_XWINPP_TAGS>
                            property in an X server. To select more than
                            one tag, seperate it with a comma.
                            Example: 'gui,pdf'.
    <XID>                   Numeric window identity.
"
}


__xwinpp_xprop()
while builtin read -r atome _ val
do
    case $atome in
        _NET_CURRENT_DESKTOP)
            if [[ $val =~ [0-9]+ ]]
            then
                desk_curr=$BASH_REMATCH
            else
                { builtin echo "What is biting your current desktop?" >&2 ; builtin exit 1 ; }
            fi
            ;;
        _NET_NUMBER_OF_DESKTOPS)
            desk_number=$val
            ;;
        _NET_DESKTOP_NAMES)
            desk_names=($val)
            ;;
        _NET_ACTIVE_WINDOW:)
            win_active=$val
            ;;
        _NET_WM_DESKTOP)
            win_desk=$val
            ;;
        _XWINPP_TAGS*)
            xprop_win_tags=$val
            ;;
        _NET_FRAME_EXTENTS)
            win_frame_extents_tmp=$val
            ;;
        _NET_WM_STATE)
            state=$val
    esac
done < <(command xprop $1)

__xwinpp_build_wins_list()
{
    builtin declare \
        id= \
        line= \
        skip= \
        state= \
        tag= \
        win_desk= \
        win_frame_extents_tmp= \
        win_tags_tmp= \
        xprop_win_tags=

    builtin declare -g \
       win_active_index_nr= \
       win_active_frame_extents= \
       win_active_tags=

    builtin declare -a \
       win_geo_w_h_tmp="()" \
       win_geo_x_y_tmp="()" \
       xwininfo_win_current="()"

    builtin declare -ga \
        win_active_geo_w_h="()" \
        win_active_geo_x_y="()" \
        win_frame_extents="()" \
        win_geo_w_h="()" \
        win_geo_x_y="()" \
        win_tags="()" \
        win_xid="()"

    function __xwinpp_build_wins_list_do
    {
        win_xid+=($id)
        win_geo_x_y+=(${win_geo_x_y_tmp[@]})
        win_geo_w_h+=(${win_geo_w_h_tmp[@]})
        win_tags+=($win_tags_tmp)
        win_frame_extents+=($win_frame_extents_tmp)
    }

    for line
    do
        id=${line%% *}
        __xwinpp_xprop "-notype -id "$id" _NET_WM_DESKTOP _XWINPP_TAGS _NET_FRAME_EXTENTS _NET_WM_STATE"

        [[ ! $win_desk =~ [0-9]+ || ! $(builtin printf '_%s_ ' "${desk_select[@]}") =~ _${win_desk}_ ]] && builtin continue

        [[ $xprop_win_tags =~ ^(found\.$|such atom on any window\.) ]] && \
        win_tags_tmp=null || \
        win_tags_tmp=${xprop_win_tags//\"/}

        [[ ${tags[@]} ]] && {
            for tag in "${tags[@]}"
            do
                [[ ! $xprop_win_tags =~ $tag ]] && skip=1
            done
            ((skip)) && \
            skip= && \
            builtin continue || \
            win_tags_tmp=${xprop_win_tags//\"/}
        }

        win_frame_extents_tmp=${win_frame_extents_tmp// /}
        [[ ! $win_frame_extents_tmp =~ [0-9],+ ]] && win_frame_extents_tmp="null,null,null,null"

        builtin mapfile -t xwininfo_win_current < <(command xwininfo -id "$id")
        win_geo_x_y_tmp=($((${xwininfo_win_current[3]##* }+${xwininfo_win_current[5]##* })),$((${xwininfo_win_current[4]##* }+${xwininfo_win_current[6]##* })))
        win_geo_w_h_tmp=(${xwininfo_win_current[7]##* },${xwininfo_win_current[8]##* })

        [[ $id =~ (${win_active/0x/0x0}|$win_active) ]] && {
            win_active_frame_extents=$win_frame_extents_tmp
            win_active_geo_x_y=(${win_geo_x_y_tmp[*]})
            win_active_geo_w_h=(${win_geo_w_h_tmp[*]})
            win_active_index_nr=${#win_xid[@]}
            win_active_tags=$win_tags_tmp
        }

        if [[ $map_state == all ]]
        then
            __xwinpp_build_wins_list_do
        else
            if [[ $map_state == visible && ! $state =~ _NET_WM_STATE_HIDDEN ]]
            then
                __xwinpp_build_wins_list_do
            elif [[ $map_state == hidden && $state =~ _NET_WM_STATE_HIDDEN ]]
            then
                __xwinpp_build_wins_list_do
            fi
        fi
    done
}

__xwinpp_set_position_win_active()
{
    [[ $win_active_position == end ]] && win_active_position=$((${#win_xid[@]}-1))
    [[ $win_active_position == start ]] && win_active_position=0

    ((win_active_position != win_active_index_nr)) && {

        builtin unset -v \
            "win_xid[$win_active_index_nr]" \
            "win_geo_x_y[$win_active_index_nr]" \
            "win_geo_w_h[$win_active_index_nr]" \
            "win_tags[$win_active_index_nr]" \
            "win_frame_extents[$win_active_index_nr]"

        case $win_active_position in
            0)
                win_xid=($win_active ${win_xid[*]})
                win_geo_x_y=(${win_active_geo_x_y[*]} ${win_geo_x_y[*]})
                win_geo_w_h=(${win_active_geo_w_h[*]} ${win_geo_w_h[*]})
                win_tags=($win_active_tags ${win_tags[*]})
                win_frame_extents=($win_active_frame_extents ${win_frame_extents[*]})
                ;;
            ${#win_xid[@]})
                win_xid=(${win_xid[*]} $win_active)
                win_geo_x_y=(${win_geo_x_y[*]} ${win_active_geo_x_y[*]})
                win_geo_w_h=(${win_geo_w_h[*]} ${win_active_geo_w_h[*]})
                win_tags=(${win_tags[*]} $win_active_tags)
                win_frame_extents=(${win_frame_extents[*]} $win_active_frame_extents)
                ;;
            *)
                if (($win_active_position > ${#win_xid[@]}))
                then
                    { builtin printf '%s\n' "Index position ${win_active_position} is not suitable." >&2 ; builtin exit 1 ; }
                else
                    for ((i=${#win_xid[@]}-1 ; i >= $win_active_position ; i--))
                    do
                        win_xid[$i+1]=${win_xid[$i]}
                        win_geo_x_y[$i+1]=${win_geo_x_y[$i]}
                        win_geo_w_h[$i+1]=${win_geo_w_h[$i]}
                        win_tags[$i+1]=${win_tags[$i]}
                        win_frame_extents[$i+1]=${win_frame_extents[$i]}
                        ((win_active_position == i)) && {
                            win_xid[$i]=${win_active/0x/0x0}
                            win_geo_x_y[$i]=$(builtin printf '%s\n' "${win_active_geo_x_y[*]}")
                            win_geo_w_h[$i]=$(builtin printf '%s\n' "${win_active_geo_w_h[*]}")
                            win_tags[$i]=$win_active_tags
                            win_frame_extents[$i]=$win_active_frame_extents
                        }
                    done
                fi
        esac
    }
}

__xwinpp_print_wins_list()
{
    builtin printf '%s\n' "_xwinpp_desk_curr=$desk_curr
_xwinpp_desk_select=(${desk_select[*]})
_xwinpp_win_active=$win_active
_xwinpp_win_active_geo_x_y=(${win_active_geo_x_y[*]})
_xwinpp_win_active_geo_w_h=(${win_active_geo_w_h[*]})
_xwinpp_win_active_frame_extents=$win_active_frame_extents
_xwinpp_win_active_tags=$win_active_tags
_xwinpp_win_xid=(${win_xid[*]})
_xwinpp_win_number=${#win_xid[@]}
_xwinpp_win_geo_x_y=(${win_geo_x_y[*]})
_xwinpp_win_geo_w_h=(${win_geo_w_h[*]})
_xwinpp_win_frame_extents=(${win_frame_extents[*]})
_xwinpp_win_tags=(${win_tags[*]})"
}

__xwinpp_tag()
{
    builtin declare xid=

    if [[ ${sstring%%:*} == tag ]]
    then
        if [[ -z ${sstring#*:} ]]
        then
            __xwinpp_set() { command xprop -id "$xid" -remove _XWINPP_TAGS ; }
        else
            __xwinpp_set() { command xprop -id "$xid" -format _XWINPP_TAGS 8u -set _XWINPP_TAGS "${sstring#*:}" ; }
        fi
    else
         { builtin echo "Actually, you may only set tags." >&2 ; builtin exit 1 ; }
    fi

    for xid in "${win_xid[@]}"
    do
        __xwinpp_set
    done
}

__xwinpp_main()
{

    (($# == 0)) && \
        { builtin printf '%s\n' "USAGE: $(__xwinpp_usage)" >&2 ; builtin exit 1 ; }

    builtin declare \
        arg= \
        args= \
        delim=\'

    for arg
    do
        arg=${arg#--}
        case $arg in
            desk=?*)            args="${args}-D ${delim}${arg#*=}${delim} "  ;;
            help)               args="${args}-h "                            ;;
            hidden)             args="${args}-B "                            ;;
            input-file=?*)      args="${args}-I ${delim}${arg#*=}${delim} "  ;;
            print)              args="${args}-p "                            ;;
            set=?*)             args="${args}-S ${delim}${arg#*=}${delim} "  ;;
            tags=?*)            args="${args}-t ${delim}${arg#*=}${delim} "  ;;
            version)            args="${args}-v "                            ;;
            visible)            args="${args}-b "                            ;;
            win-active-pos=?*)  args="${args}-P ${delim}${arg#*=}${delim} "  ;;
            win-active=?*)      args="${args}-V ${delim}${arg#*=}${delim} "  ;;
            *)                  if [[ ${arg:0:1} == - ]]
                                then
                                    args="${args}${arg} "
                                else
                                    args="${args}${delim}${arg}${delim} "
                                fi
        esac
    done

    builtin declare \
        action= \
        map_state= \
        only_hidden= \
        only_visible= \
        opt= \
        sstring= \
        win_active_position=

    builtin declare -a \
       desk_select="()" \
       tags="()" \

    function __xwinpp_set_args
    if [[ ! $OPTARG =~ ^-.+ ]]
    then
        builtin eval "$1"
    else
        { builtin printf '%s\n' "Option '-${opt}' requires an argument" 1>&2 ; builtin exit 1 ; }
    fi

    builtin eval builtin set -- "$args"
    while builtin getopts :bBD:hI:pP:S:t:V:v opt
    do
        case $opt in
            B)  only_hidden=only_hidden ; map_state=hidden          ;;
            D)  __xwinpp_set_args "desk_select+=(${OPTARG//,/ })"   ;;
            I)  __xwinpp_set_args "XWINPP_INPUT_FILE=$OPTARG"       ;;
            P)  __xwinpp_set_args "win_active_position=$OPTARG"     ;;
            S)  __xwinpp_set_args "sstring=$OPTARG" && action=set   ;;
            V)  __xwinpp_set_args "XWINPP_WIN_ACTIVE=$OPTARG"       ;;
            b)  only_visible=only_visible ; map_state=visible       ;;
            h)  __xwinpp_help ; builtin exit 0                      ;;
            p)  action=print                                        ;;
            t)  __xwinpp_set_args "tags+=(${OPTARG//,/ })"          ;;
            v)  __xwinpp_version ; builtin exit 0                   ;;
            :)  builtin printf '%s\n' "Option '-${OPTARG}' requires an argument" 1>&2
                builtin exit 1                                      ;;
            \?) builtin printf '%s\n' "Unknown flag: '-${OPTARG}'" 1>&2
                builtin exit 1
        esac
    done

    builtin declare file_input=
    builtin declare -a win_list="()"

    if [[ $XWINPP_INPUT_FILE ]]
    then
        file_input=$XWINPP_INPUT_FILE
        if [[ $file_input == - ]]
        then
            if [[ -p /dev/stdin ]]
            then
                while builtin read -r
                do
                    win_list+=("$REPLY")
                done
            else
                { builtin echo "Stdin is not coming from a pipe." >&2 ; builtin exit 1 ; }
            fi
        else
            if [[ -p $file_input || -f $file_input ]]
            then
                while builtin read -r
                do
                    win_list+=("$REPLY")
                done < "$file_input"
            else
                { builtin echo "File does not exist or is neather a regular file nor a named pipe." >&2 ; builtin exit 1 ; }
            fi
        fi
    else
        { builtin echo "Input file is not set." >&2 ; builtin exit 1 ; }
    fi

    builtin declare \
        atome= \
        desk_curr= \
        desk_number= \
        i= \
        j= \
        k= \
        unset= \
        ustring= \
        val= \
        win_active=

    builtin declare -a \
       desk_names="()" \
       desk_numbers="()" \

    __xwinpp_xprop "-root -notype _NET_CURRENT_DESKTOP _NET_NUMBER_OF_DESKTOPS _NET_DESKTOP_NAMES _NET_ACTIVE_WINDOW"

    if ((${#desk_select[@]} > 0))
    then
        for ((i=0 ; i < $desk_number ; i++))
        do
            desk_numbers+=($i)
        done
        for j in ${!desk_select[@]}
        do
            case ${desk_select[$j]} in
                any)
                    desk_select=(${desk_numbers[@]})
                    ;;
                curr)
                    desk_select[$j]=$desk_curr
                    ;;
                next)
                    desk_select[$j]=${desk_numbers[$desk_curr+1]:-${desk_numbers[0]}}
                    ;;
                prev)
                    desk_select[$j]=${desk_numbers[$desk_curr-1]:-${desk_numbers[-1]}}
                    ;;
                i:+([0-9]))
                    desk_select[$j]=${desk_select[$j]#*:}
                    ;;
                s:?*)
                    desk_names=(${desk_names[@]//\",/\"})
                    for k in "${!desk_names[@]}"
                    do
                        [[ ${desk_names[$k]} == \"${desk_select[$j]#*:}\" ]] && \
                        desk_select[$j]=${desk_numbers[$k]}
                    done
                    ;;
                *)
                    { builtin echo "Unknown argument for -D." >&2 ; builtin exit 1 ; }
            esac
        done
    else
        desk_select=($desk_curr)
    fi

    if [[ $only_visible && $only_hidden ]]
    then
        { builtin echo "Wrongly, only_visible and only_hidden are set to true. Do not use -b and -B at the same time." >&2 ; builtin exit 1 ; }
    elif [[ ! $only_visible && ! $only_hidden ]]
    then
        map_state=all
    fi

    if [[ $XWINPP_WIN_ACTIVE ]]
    then
        win_active=${XWINPP_WIN_ACTIVE/0x0/0x}
    else
        if ((${desk_select[0]} != desk_curr))
        then
            win_active=${win_xid[0]}
        else
            builtin read -r _ _ win_active <<< "$win_active"
        fi
        [[ -z $win_active ]] && {
            win_active=
            builtin declare -a \
                win_active_geo_w_h="()" \
                win_active_geo_x_y="()"
        }
    fi

    __xwinpp_build_wins_list "${win_list[@]}"

    case $action in
        print)
            [[ $win_active_position ]] && __xwinpp_set_position_win_active
            __xwinpp_print_wins_list
            ;;
        set)
            __xwinpp_tag
            ;;
        *)
            { builtin printf '%s\n' "USAGE: $(__xwinpp_usage)" >&2 ; builtin exit 1 ; }
    esac
}

# -- MAIN.

__xwinpp_main "$@"
